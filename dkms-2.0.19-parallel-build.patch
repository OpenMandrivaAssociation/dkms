--- dkms-2.0.19/dkms~	2012-06-05 16:13:25.701293724 +0200
+++ dkms-2.0.19/dkms	2012-06-05 16:13:28.357260520 +0200
@@ -19,6 +19,8 @@
 #    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 
+make_flags="-j`/usr/bin/getconf _NPROCESSORS_ONLN`"
+
 function invoke_command ()
 {
     local exitval=0
@@ -490,7 +492,7 @@ function read_conf ()
 	if [ -n "${MAKE[$index]}" ] && \
 	    [ -n "${MAKE_MATCH[$index]}" ] && \
 	    echo $1 | egrep -q "${MAKE_MATCH[$index]}"; then
-	    make_command="${MAKE[$index]}"
+	    make_command="${MAKE[$index]} $make_flags"
 	fi
 	index=$(($index+1))
     done
@@ -498,17 +500,17 @@ function read_conf ()
     # Use the generic make and make clean commands if not specified
     if [[ $(VER $1) < $(VER 2.6.6) ]]; then
 	if [ -z "$make_command" ]; then
-	    make_command="make -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build modules"
+	    make_command="make $make_flags -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build modules"
 	fi
 	if [ -z "$clean" ]; then
-	    clean="make -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build clean"
+	    clean="make $make_flags -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build clean"
 	fi
     else
 	if [ -z "$make_command" ]; then
-	    make_command="make -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build"
+	    make_command="make $make_flags -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build"
 	fi
 	if [ -z "$clean" ]; then
-	    clean="make -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build clean"
+	    clean="make $make_flags -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build clean"
 	fi
     fi
 
@@ -976,8 +978,8 @@ function prepare_kernel()
 	[ -n "$config_contents" ] && echo "$config_contents" > .config
 	invoke_command "cp /boot/vmlinuz.version.h include/linux/version.h" "using /boot/vmlinux.version.h"
 	invoke_command "cp -f $kernel_config .config" "using $kernel_config"
-	invoke_command "make KERNELRELEASE=$1 cloneconfig" "make cloneconfig" background
-	invoke_command "make CONFIG_MODVERSIONS=1 KERNELRELEASE=$1 dep" "make CONFIG_MODVERSIONS=1 dep" background
+	invoke_command "make $make_flags KERNELRELEASE=$1 cloneconfig" "make $make_flags cloneconfig" background
+	invoke_command "make $make_flags CONFIG_MODVERSIONS=1 KERNELRELEASE=$1 dep" "make $make_flags CONFIG_MODVERSIONS=1 dep" background
     elif grep -q rhconfig.h $kernel_source_dir/include/linux/{modversions,version}.h 2>/dev/null; then
  	if [ -e /etc/mandriva-release ]; then
  	    echo $"Running Mandriva Linux style preparation routine"
@@ -1010,7 +1012,7 @@ function prepare_kernel()
 	    mv -f $kernel_source_dir/tmp_include_depends.new $kernel_source_dir/tmp_include_depends
 	fi
 
-	invoke_command "make KERNELRELEASE=$1 oldconfig" "make oldconfig" background
+	invoke_command "make $make_flags KERNELRELEASE=$1 oldconfig" "make $make_flags oldconfig" background
 	kerneldoth_contents=`cat /boot/kernel.h 2>/dev/null`
 	invoke_command "/usr/lib/dkms/mkkerneldoth --kernelver $1 --targetarch $2 --output /boot/kernel.h" "running mkkerneldoth" background
     else
@@ -1035,11 +1037,11 @@ function prepare_kernel()
 	    echo $"Your build will likely fail because of this." >&2
 	fi
 
-	invoke_command "make KERNELRELEASE=$1 oldconfig" "make oldconfig" background
+	invoke_command "make $make_flags KERNELRELEASE=$1 oldconfig" "make $make_flags oldconfig" background
 	if [[ $(VER $1) < $(VER 2.5) ]]; then
-	    invoke_command "make KERNELRELEASE=$1 dep" "make dep" background
+	    invoke_command "make $make_flags KERNELRELEASE=$1 dep" "make $make_flags dep" background
 	else
-	    invoke_command "make KERNELRELEASE=$1 prepare scripts" "make prepare" background
+	    invoke_command "make $make_flags KERNELRELEASE=$1 prepare scripts" "make $make_flags prepare" background
 	fi
     fi
     cd - >/dev/null
