--- dkms-2.6.1/dkms	2018-08-10 21:33:12.271051091 +0100
+++ dkms-2.6.1/dkms.parallel~	2018-08-10 22:41:38.724646574 +0100
@@ -20,8 +20,6 @@
 #    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 #
 
-# do build with jobs being twice the number of cpus
-make_flags="-j$((`/usr/bin/getconf _NPROCESSORS_ONLN` * 2))"
 
 # All of the variables we will accept from dkms.conf.
 # Does not include directives
@@ -683,20 +681,24 @@
     done
 
     # Get the correct make command
-    [[ ${MAKE_MATCH[0]} ]] || make_command="${MAKE[0]}"
+    [[ ${MAKE_MATCH[0]} ]] || make_command="${MAKE[0]} $make_flags"    
     for ((index=0; index < ${#MAKE[@]}; index++)); do
     [[ ${MAKE[$index]} && ${MAKE_MATCH[$index]} && \
         $1 =~ ${MAKE_MATCH[$index]} ]] && \
-        make_command="${MAKE[$index]}"
+	    make_command="${MAKE[$index]} $make_flags"
     done
 
     # Use the generic make and make clean commands if not specified
     if [[ $(VER $1) < $(VER 2.6.6) ]]; then
-        [[ ! $make_command ]] && make_command="make -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build modules"
-        [[ ! $clean ]] && clean="make -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build clean"
+        [[ ! $make_command ]] && \
+	    make_command="make $make_flags -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build modules"
+        [[ ! $clean ]] && \
+        clean="make -C $kernel_source_dir SUBDIRS=$dkms_tree/$module/$module_version/build clean"
     else
-        [[ ! $make_command ]] && make_command="make -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build"
-        [[ ! $clean ]] && clean="make -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build clean"
+        [[ ! $make_command ]] && \
+	        make_command="make $make_flags -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build"
+        [[ ! $clean ]] && \
+            clean="make -C $kernel_source_dir M=$dkms_tree/$module/$module_version/build clean"
     fi
 
     # Set modules_conf_array
@@ -1251,8 +1253,8 @@
         [[ $config_contents ]] && echo "$config_contents" > .config
         invoke_command "cp /boot/vmlinuz.version.h include/linux/version.h" "using /boot/vmlinux.version.h"
         invoke_command "cp -f $kernel_config .config" "using $kernel_config"
-        invoke_command "make KERNELRELEASE=$1 cloneconfig" "make cloneconfig" background
-        invoke_command "make -j$parallel_jobs CONFIG_MODVERSIONS=1 KERNELRELEASE=$1 dep" "make CONFIG_MODVERSIONS=1 dep" background
+	    invoke_command "make $make_flags KERNELRELEASE=$1 cloneconfig" "make $make_flags cloneconfig" background
+	    invoke_command "make $make_flags CONFIG_MODVERSIONS=1 KERNELRELEASE=$1 dep" "make $make_flags CONFIG_MODVERSIONS=1 dep" background
     elif grep -q rhconfig.h $kernel_source_dir/include/linux/{modversions,version}.h 2>/dev/null; then
  	if [ -e /etc/mandriva-release ]; then
  	    echo $"Running OpenMandriva style preparation routine"
@@ -1283,8 +1285,8 @@
             sed 's/\/usr\/src\/build\/.*\/install//g' $kernel_source_dir/tmp_include_depends > $kernel_source_dir/tmp_include_depends.new
             mv -f $kernel_source_dir/tmp_include_depends.new $kernel_source_dir/tmp_include_depends
         fi
-
-        invoke_command "make KERNELRELEASE=$1 oldconfig" "make oldconfig" background
+        
+    	invoke_command "make $make_flags KERNELRELEASE=$1 oldconfig" "make $make_flags oldconfig" background
         kerneldoth_contents=$(cat /boot/kernel.h 2>/dev/null)
         invoke_command "/usr/lib/dkms/mkkerneldoth --kernelver $1 --targetarch $2 --output /boot/kernel.h" "running mkkerneldoth" background
     else
@@ -1307,12 +1309,11 @@
                 $"Try using the --config option to specify where one can be found." \
                 $"Your build will likely fail because of this."
         fi
-
-        invoke_command "make KERNELRELEASE=$1 oldconfig" "make oldconfig" background
+    	invoke_command "make $make_flags KERNELRELEASE=$1 oldconfig" "make $make_flags oldconfig" background
         if [[ $(VER $1) < $(VER 2.5) ]]; then
-            invoke_command "make -j$parallel_jobs KERNELRELEASE=$1 dep" "make dep" background
-        else
-            invoke_command "make -j$parallel_jobs KERNELRELEASE=$1 prepare scripts" "make prepare" background
+	        invoke_command "make $make_flags KERNELRELEASE=$1 dep" "make $make_flags dep" background
+            else
+    	    invoke_command "make $make_flags KERNELRELEASE=$1 prepare scripts" "make $make_flags prepare" background
         fi
     fi
     cd - >/dev/null
